# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Od1Xgi6kcUa7FeiNdhvSw3yDURut9Kx3
"""

import google.generativeai as genai
from flask import Flask, render_template, request, redirect, url_for
import joblib
import pandas as pd
import os

# Set Gemini API key
genai.configure(api_key=os.getenv('GEMINI_API_KEY'))
# Initialize Flask app
app = Flask(__name__)

# Load pre-trained models and scalers
model_4_category = joblib.load('model_4_category.pkl')
model_7_category = joblib.load('model_7_category.pkl')
scaler_4_category = joblib.load('scaler_4_category.pkl')
scaler_7_category = joblib.load('scaler_7_category.pkl')

# Define columns and mappings (same as original)
required_columns = ['Gender', 'family_history_with_overweight', 'FAVC', 'CAEC', 'SMOKE', 'SCC', 'CALC', 'MTRANS',
                   'Age', 'Height', 'Weight', 'BMI', 'CH2O', 'FAF', 'FCVC', 'NCP', 'TUE']

text_to_number_map = {
    'Gender': {'Male': 0, 'Female': 1},
    'family_history_with_overweight': {'No': 0, 'Yes': 1},
    'FAVC': {'No': 0, 'Yes': 1},
    'CAEC': {'No': 0, 'Some': 1, 'Full': 2},
    'SMOKE': {'No': 0, 'Yes': 1},
    'SCC': {'No': 0, 'Yes': 1},
    'CALC': {'None': 0, 'Some': 1, 'Full': 2},
    'MTRANS': {'Motorbike': 0, 'Bike': 1, 'Public': 2, 'Walking': 3}
}

def preprocess_input(data, model_type):
    # Preprocess data as before
    for key in text_to_number_map:
        if key in data:
            data[key] = text_to_number_map[key].get(data[key], data[key])

    if 'BMI' not in data or pd.isnull(data['BMI']):
        data['BMI'] = data['Weight'] / (data['Height'] ** 2)

    input_data = pd.DataFrame([data])
    input_data = input_data.reindex(columns=required_columns).fillna(0)

    if model_type == '4_category':
        input_data = input_data[scaler_4_category.feature_names_in_]
        input_scaled = scaler_4_category.transform(input_data)
    else:
        input_data = input_data[scaler_7_category.feature_names_in_]
        input_scaled = scaler_7_category.transform(input_data)

    return input_scaled

def get_gemini_suggestions(prediction_label, user_data, plan_type="diet"):
    if plan_type == "diet":
        prompt = f"""
        User data: {user_data}. 
        Predicted BMI category: '{prediction_label}'
        
        Provide a personalized diet plan in clear bullet points. Include:
        - Recommended daily calorie intake
        - Macronutrient distribution
        - Food recommendations
        - Foods to avoid
        - Meal timing suggestions
        
        Keep it practical and actionable.
        """
    else:
        prompt = f"""
        User data: {user_data}. 
        Predicted BMI category: '{prediction_label}'
        
        Provide a personalized exercise plan in clear bullet points. Include:
        - Recommended workout frequency
        - Types of exercises
        - Duration and intensity
        - Weekly schedule
        - Safety considerations
        
        Make it realistic and adaptable.
        """

    try:
        # List available models to see what's supported
        available_models = genai.list_models()
        supported_models = []
        
        for model in available_models:
            if 'generateContent' in model.supported_generation_methods:
                supported_models.append(model.name)
                print(f"Available model: {model.name}")
        
        # Use gemini-1.0-pro or gemini-pro (try different variations)
        model_name = None
        for name in ['models/gemini-1.0-pro', 'models/gemini-pro', 'gemini-pro']:
            if any(name in supported_model for supported_model in supported_models):
                model_name = name
                break
        
        if not model_name:
            # Fallback to the first available model that supports generateContent
            model_name = supported_models[0] if supported_models else 'models/gemini-1.0-pro'
        
        print(f"Using model: {model_name}")
        
        # Initialize the Gemini model
        model = genai.GenerativeModel(model_name)
        
        # Generate content
        response = model.generate_content(
            prompt,
            generation_config=genai.types.GenerationConfig(
                max_output_tokens=1000,
                temperature=0.7
            )
        )
        
        suggestions = response.text.strip()

        # Format the response as bullet points
        if plan_type == "diet":
            diet_plan = suggestions.replace("Diet Plan:", "").strip() if len(suggestions) > 0 else "No diet plan provided."
            # Split by various bullet point formats
            diet_plan_list = diet_plan.split('•')
            if len(diet_plan_list) == 1:
                diet_plan_list = diet_plan.split('-')
            if len(diet_plan_list) == 1:
                diet_plan_list = diet_plan.split('*')
            
            formatted_plan = ""
            for item in diet_plan_list:
                item = item.strip()
                if item and len(item) > 5:  # Avoid very short items
                    formatted_plan += f"• {item}\n"
            return formatted_plan if formatted_plan else "No diet plan provided."
        
        else:  # exercise plan
            exercise_plan = suggestions.strip() if len(suggestions) > 1 else "No exercise plan provided."
            # Split by various bullet point formats
            exercise_plan_list = exercise_plan.split('•')
            if len(exercise_plan_list) == 1:
                exercise_plan_list = exercise_plan.split('-')
            if len(exercise_plan_list) == 1:
                exercise_plan_list = exercise_plan.split('*')
            
            formatted_plan = ""
            for item in exercise_plan_list:
                item = item.strip()
                if item and len(item) > 5:  # Avoid very short items
                    formatted_plan += f"• {item}\n"
            return formatted_plan if formatted_plan else "No exercise plan provided."

    except Exception as e:
        print(f"Error generating {plan_type} suggestions: {str(e)}")
        # Return a fallback response
        if plan_type == "diet":
            return f"""• Consult with a nutritionist for personalized diet advice
• Focus on balanced meals with proteins, carbs, and healthy fats
• Stay hydrated and limit processed foods
• Based on your category '{prediction_label}', aim for gradual, sustainable changes"""
        else:
            return f"""• Start with light exercises and gradually increase intensity
• Include both cardio and strength training
• Aim for 150 minutes of moderate exercise per week
• Based on your category '{prediction_label}', focus on consistency over intensity"""

def get_gpt_suggestions(prediction_label, user_data):
    """Wrapper for diet plan using Gemini"""
    return get_gemini_suggestions(prediction_label, user_data, "diet")

def get_gpt_suggestions1(prediction_label, user_data):
    """Wrapper for exercise plan using Gemini"""
    return get_gemini_suggestions(prediction_label, user_data, "exercise")

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/select_model', methods=['POST'])
def select_model():
    model_type = request.form['model_type']
    if model_type == '4_category':
        return redirect(url_for('form_4_category'))
    else:
        return redirect(url_for('form_7_category'))

@app.route('/form_4_category')
def form_4_category():
    return render_template('form_4_category.html')

@app.route('/form_7_category')
def form_7_category():
    return render_template('form_7_category.html')

@app.route('/predict_4_category', methods=['POST'])
def predict_4_category():
    # Extract form data
    input_data = {
        'Gender': request.form['Gender'],
        'family_history_with_overweight': request.form['family_history_with_overweight'],
        'FAVC': request.form['FAVC'],
        'CAEC': request.form['CAEC'],
        'SMOKE': request.form['SMOKE'],
        'SCC': request.form['SCC'],
        'CALC': request.form['CALC'],
        'MTRANS': request.form['MTRANS'],
        'Age': float(request.form['Age']),
        'Height': float(request.form['Height']),
        'Weight': float(request.form['Weight']),
        'CH2O': float(request.form['CH2O']),
        'FAF': float(request.form['FAF']),
        'FCVC': float(request.form['FCVC']),
        'NCP': float(request.form['NCP']),
        'TUE': float(request.form['TUE'])
    }

    # Preprocess input data
    input_scaled = preprocess_input(input_data, '4_category')
    prediction = model_4_category.predict(input_scaled)

    prediction_label = ['Underweight', 'Normal', 'Obesity', 'Overweight'][prediction[0]]

    # Get personalized suggestions from Gemini API
    suggestion_diet = get_gpt_suggestions(prediction_label, input_data)
    suggestion_exercise = get_gpt_suggestions1(prediction_label, input_data)

    return render_template('result_4_category.html',
                           prediction_label=prediction_label,
                           suggestion_diet=suggestion_diet,
                           suggestion_exercise=suggestion_exercise)

@app.route('/predict_7_category', methods=['POST'])
def predict_7_category():
    # Similar as above for 7 category prediction
    input_data = {
        'Gender': request.form['Gender'],
        'family_history_with_overweight': request.form['family_history_with_overweight'],
        'FAVC': request.form['FAVC'],
        'CAEC': request.form['CAEC'],
        'SMOKE': request.form['SMOKE'],
        'SCC': request.form['SCC'],
        'CALC': request.form['CALC'],
        'MTRANS': request.form['MTRANS'],
        'Age': float(request.form['Age']),
        'Height': float(request.form['Height']),
        'Weight': float(request.form['Weight']),
        'CH2O': float(request.form['CH2O']),
        'FAF': float(request.form['FAF']),
        'FCVC': float(request.form['FCVC']),
        'NCP': float(request.form['NCP']),
        'TUE': float(request.form['TUE'])
    }

    input_scaled = preprocess_input(input_data, '7_category')
    prediction = model_7_category.predict(input_scaled)

    prediction_label = ['Insufficient Weight', 'Normal Weight', 'Obesity Type_I', 'Obesity Type II',
                        'Obesity Type III', 'Overweight Level I', 'Overweight Level II'][prediction[0]]

    # Get personalized suggestions from Gemini API
    suggestion_diet = get_gpt_suggestions(prediction_label, input_data)
    suggestion_exercise = get_gpt_suggestions1(prediction_label, input_data)

    return render_template('result_7_category.html',
                           prediction_label=prediction_label,
                           suggestion_diet=suggestion_diet,
                           suggestion_exercise=suggestion_exercise)

if __name__ == "__main__":
    app.run(debug=True)
