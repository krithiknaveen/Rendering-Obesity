# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Od1Xgi6kcUa7FeiNdhvSw3yDURut9Kx3
"""

import google.generativeai as genai
from flask import Flask, render_template, request, redirect, url_for
import joblib
import pandas as pd
import os

# Set Gemini API key
genai.configure(api_key=os.getenv('GEMINI_API_KEY'))
# Initialize Flask app
app = Flask(__name__)

# Load pre-trained models and scalers
model_4_category = joblib.load('model_4_category.pkl')
model_7_category = joblib.load('model_7_category.pkl')
scaler_4_category = joblib.load('scaler_4_category.pkl')
scaler_7_category = joblib.load('scaler_7_category.pkl')

# Define columns and mappings (same as original)
required_columns = ['Gender', 'family_history_with_overweight', 'FAVC', 'CAEC', 'SMOKE', 'SCC', 'CALC', 'MTRANS',
                   'Age', 'Height', 'Weight', 'BMI', 'CH2O', 'FAF', 'FCVC', 'NCP', 'TUE']

text_to_number_map = {
    'Gender': {'Male': 0, 'Female': 1},
    'family_history_with_overweight': {'No': 0, 'Yes': 1},
    'FAVC': {'No': 0, 'Yes': 1},
    'CAEC': {'No': 0, 'Some': 1, 'Full': 2},
    'SMOKE': {'No': 0, 'Yes': 1},
    'SCC': {'No': 0, 'Yes': 1},
    'CALC': {'None': 0, 'Some': 1, 'Full': 2},
    'MTRANS': {'Motorbike': 0, 'Bike': 1, 'Public': 2, 'Walking': 3}
}

def preprocess_input(data, model_type):
    # Preprocess data as before
    for key in text_to_number_map:
        if key in data:
            data[key] = text_to_number_map[key].get(data[key], data[key])

    if 'BMI' not in data or pd.isnull(data['BMI']):
        data['BMI'] = data['Weight'] / (data['Height'] ** 2)

    input_data = pd.DataFrame([data])
    input_data = input_data.reindex(columns=required_columns).fillna(0)

    if model_type == '4_category':
        input_data = input_data[scaler_4_category.feature_names_in_]
        input_scaled = scaler_4_category.transform(input_data)
    else:
        input_data = input_data[scaler_7_category.feature_names_in_]
        input_scaled = scaler_7_category.transform(input_data)

    return input_scaled

def get_gemini_suggestions(prediction_label, user_data, plan_type="diet"):
    if plan_type == "diet":
        prompt = f"""
        Create a specific diet plan for someone with BMI category: {prediction_label}.
        User details: {user_data}
        
        Provide 3-4 specific food and nutrition recommendations. Be direct and concrete about what to eat.
        Examples: "Eat more vegetables like broccoli and spinach", "Include lean proteins like chicken and fish", 
        "Reduce sugar and processed foods", "Drink 2-3 liters of water daily".
        
        Make it practical and actionable with real food examples.
        """
    else:
        prompt = f"""
        Create a specific exercise plan for someone with BMI category: {prediction_label}.
        User details: {user_data}
        
        Provide 3-4 specific exercise recommendations. Be direct and concrete about what activities to do.
        Examples: "Walk 30 minutes daily", "Do strength training twice weekly", 
        "Include stretching exercises", "Try swimming or cycling".
        
        Make it practical and actionable with real exercise examples.
        """

    try:
        # Use gemini-2.0-flash
        model = genai.GenerativeModel('models/gemini-2.0-flash')
        
        # Generate content
        response = model.generate_content(
            prompt,
            generation_config=genai.types.GenerationConfig(
                max_output_tokens=400,
                temperature=0.7
            )
        )
        
        suggestions = response.text.strip()
        
        # If the response is still vague, provide more specific fallbacks
        if len(suggestions) < 50 or "no specific" in suggestions.lower() or "consult" in suggestions.lower():
            return get_fallback_suggestions(prediction_label, plan_type)
        
        # Clean up and ensure we have proper content
        suggestions = suggestions.replace('â€¢', '').replace('-', '').replace('*', '')
        suggestions = suggestions.replace('**', '').replace('__', '')
        
        return suggestions if suggestions else get_fallback_suggestions(prediction_label, plan_type)

    except Exception as e:
        print(f"Error generating {plan_type} suggestions: {str(e)}")
        return get_fallback_suggestions(prediction_label, plan_type)

def get_fallback_suggestions(prediction_label, plan_type):
    """Provide specific fallback suggestions based on BMI category"""
    
    diet_fallbacks = {
        'Underweight': "Eat calorie-dense foods like nuts, avocados, and whole grains. Include protein-rich foods like eggs, chicken, and dairy. Have regular meals with healthy snacks between meals. Consider smoothies with protein powder for extra calories.",
        'Normal': "Maintain balanced meals with vegetables, lean proteins, and whole grains. Include fruits and healthy fats in your diet. Stay hydrated and limit processed foods. Continue with your current healthy eating habits.",
        'Overweight': "Focus on portion control and increase vegetable intake. Choose lean proteins like fish and chicken over red meat. Reduce sugar, processed foods, and high-calorie drinks. Include fiber-rich foods to feel full longer.",
        'Obesity': "Reduce calorie intake by choosing nutrient-dense foods. Increase vegetable consumption and lean proteins. Eliminate sugary drinks and processed snacks. Consider smaller, more frequent meals to manage hunger.",
        'Insufficient Weight': "Increase calorie intake with healthy foods like nuts, dairy, and whole grains. Include protein with every meal. Eat regular meals and add healthy snacks. Consider nutritional supplements if needed.",
        'Normal Weight': "Maintain your current healthy weight with balanced nutrition. Include variety in your diet with different colored vegetables. Stay active and hydrated. Limit alcohol and processed foods.",
        'Obesity Type_I': "Reduce portion sizes and increase vegetable consumption. Choose lean proteins and whole grains over processed foods. Eliminate sugary beverages and snacks. Consider professional guidance for sustainable weight loss.",
        'Obesity Type II': "Focus on significant calorie reduction through healthy food choices. Increase fiber intake with vegetables and whole grains. Eliminate all processed foods and sugary items. Seek professional medical and nutritional advice.",
        'Obesity Type III': "Requires medical supervision for diet planning. Focus on nutrient-dense, low-calorie foods. Professional guidance essential for safe weight management. Small, sustainable changes are crucial.",
        'Overweight Level I': "Moderate calorie reduction with increased physical activity. Focus on whole foods over processed options. Include more vegetables and lean proteins. Reduce portion sizes gradually.",
        'Overweight Level II': "Implement structured meal planning with calorie control. Increase vegetable and fiber intake significantly. Eliminate sugary drinks and processed snacks. Consider professional nutritional guidance."
    }
    
    exercise_fallbacks = {
        'Underweight': "Focus on strength training to build muscle. Include weight lifting 3 times weekly. Combine with moderate cardio for overall health. Ensure adequate rest and recovery between workouts.",
        'Normal': "Maintain current activity level with variety. Include both cardio and strength training. Try new activities to stay motivated. Aim for 150 minutes of moderate exercise weekly.",
        'Overweight': "Start with low-impact cardio like walking or swimming. Include light strength training twice weekly. Gradually increase duration and intensity. Focus on consistency over intensity.",
        'Obesity': "Begin with gentle activities like walking or water aerobics. Focus on building daily movement habits. Include light stretching and mobility exercises. Progress slowly to avoid injury.",
        'Insufficient Weight': "Focus on strength training to build muscle mass. Include resistance exercises 3 times weekly. Combine with light cardio for cardiovascular health. Ensure proper nutrition to support exercise.",
        'Normal Weight': "Maintain variety in your exercise routine. Include both cardio and strength training. Try recreational sports or dancing for enjoyment. Stay active daily with walking or cycling.",
        'Obesity Type_I': "Start with low-impact exercises like walking or stationary cycling. Include light strength training for muscle maintenance. Focus on building consistent exercise habits. Progress gradually as fitness improves.",
        'Obesity Type II': "Begin with very gentle activities like chair exercises or water walking. Focus on daily movement and reducing sedentary time. Include stretching for flexibility. Seek professional guidance for safe exercise.",
        'Obesity Type III': "Requires medical clearance before exercise. Start with very gentle movements and stretching. Focus on daily activity rather than structured exercise. Professional supervision recommended.",
        'Overweight Level I': "Include brisk walking, swimming, or cycling regularly. Add strength training twice weekly for muscle tone. Focus on building sustainable exercise habits. Gradually increase activity duration.",
        'Overweight Level II': "Start with moderate walking and light strength exercises. Include variety to maintain motivation. Focus on consistent daily activity. Progress exercise intensity gradually over time."
    }
    
    if plan_type == "diet":
        return diet_fallbacks.get(prediction_label, "Focus on balanced meals with vegetables, proteins, and whole grains. Stay hydrated and limit processed foods for better health.")
    else:
        return exercise_fallbacks.get(prediction_label, "Include regular physical activity with both cardio and strength training. Start gradually and focus on consistency for best results.")

def get_gpt_suggestions(prediction_label, user_data):
    """Wrapper for diet plan using Gemini"""
    return get_gemini_suggestions(prediction_label, user_data, "diet")

def get_gpt_suggestions1(prediction_label, user_data):
    """Wrapper for exercise plan using Gemini"""
    return get_gemini_suggestions(prediction_label, user_data, "exercise")

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/select_model', methods=['POST'])
def select_model():
    model_type = request.form['model_type']
    if model_type == '4_category':
        return redirect(url_for('form_4_category'))
    else:
        return redirect(url_for('form_7_category'))

@app.route('/form_4_category')
def form_4_category():
    return render_template('form_4_category.html')

@app.route('/form_7_category')
def form_7_category():
    return render_template('form_7_category.html')

@app.route('/predict_4_category', methods=['POST'])
def predict_4_category():
    # Extract form data
    input_data = {
        'Gender': request.form['Gender'],
        'family_history_with_overweight': request.form['family_history_with_overweight'],
        'FAVC': request.form['FAVC'],
        'CAEC': request.form['CAEC'],
        'SMOKE': request.form['SMOKE'],
        'SCC': request.form['SCC'],
        'CALC': request.form['CALC'],
        'MTRANS': request.form['MTRANS'],
        'Age': float(request.form['Age']),
        'Height': float(request.form['Height']),
        'Weight': float(request.form['Weight']),
        'CH2O': float(request.form['CH2O']),
        'FAF': float(request.form['FAF']),
        'FCVC': float(request.form['FCVC']),
        'NCP': float(request.form['NCP']),
        'TUE': float(request.form['TUE'])
    }

    # Preprocess input data
    input_scaled = preprocess_input(input_data, '4_category')
    prediction = model_4_category.predict(input_scaled)

    prediction_label = ['Underweight', 'Normal', 'Obesity', 'Overweight'][prediction[0]]

    # Get personalized suggestions from Gemini API
    suggestion_diet = get_gpt_suggestions(prediction_label, input_data)
    suggestion_exercise = get_gpt_suggestions1(prediction_label, input_data)

    return render_template('result_4_category.html',
                           prediction_label=prediction_label,
                           suggestion_diet=suggestion_diet,
                           suggestion_exercise=suggestion_exercise)

@app.route('/predict_7_category', methods=['POST'])
def predict_7_category():
    # Similar as above for 7 category prediction
    input_data = {
        'Gender': request.form['Gender'],
        'family_history_with_overweight': request.form['family_history_with_overweight'],
        'FAVC': request.form['FAVC'],
        'CAEC': request.form['CAEC'],
        'SMOKE': request.form['SMOKE'],
        'SCC': request.form['SCC'],
        'CALC': request.form['CALC'],
        'MTRANS': request.form['MTRANS'],
        'Age': float(request.form['Age']),
        'Height': float(request.form['Height']),
        'Weight': float(request.form['Weight']),
        'CH2O': float(request.form['CH2O']),
        'FAF': float(request.form['FAF']),
        'FCVC': float(request.form['FCVC']),
        'NCP': float(request.form['NCP']),
        'TUE': float(request.form['TUE'])
    }

    input_scaled = preprocess_input(input_data, '7_category')
    prediction = model_7_category.predict(input_scaled)

    prediction_label = ['Insufficient Weight', 'Normal Weight', 'Obesity Type_I', 'Obesity Type II',
                        'Obesity Type III', 'Overweight Level I', 'Overweight Level II'][prediction[0]]

    # Get personalized suggestions from Gemini API
    suggestion_diet = get_gpt_suggestions(prediction_label, input_data)
    suggestion_exercise = get_gpt_suggestions1(prediction_label, input_data)

    return render_template('result_7_category.html',
                           prediction_label=prediction_label,
                           suggestion_diet=suggestion_diet,
                           suggestion_exercise=suggestion_exercise)

if __name__ == "__main__":
    app.run(debug=True)
